# -*- coding: utf-8 -*-
"""Project 17. Spam Mail Prediction using Machine Learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VsDfAFLVclm7v2IOxpG32F6KdJN2RMCF

Importing the Dependencies
"""
from __future__ import print_function

# listening email from internet
import email
import imaplib
import sys
import time
from email import policy

import joblib
from PyQt5 import QtCore
from PyQt5.QtCore import QThread
from PyQt5.QtWidgets import QApplication, QMainWindow, QTableWidgetItem, QHeaderView

from TrainingAIModel import feature_extraction
from guiAI import Ui_MainWindow

# Load AI model
model = joblib.load('Model/Completed_model_AI.joblib')

# result = model.score(X_test, Y_test)
# print(result)

# Account
imap_host = 'imap.gmail.com'
imap_user = 'phamthaiduong526@gmail.com'
imap_pass = 'nzhelooeohpegybw'

# tduong.hust02@gmail.com
imap_pass1 = 'wkbnazljcpnklukb'


def checkEmail(input_mail):
    # convert text to feature vectors
    if input_mail is not None:
        input_mail = [input_mail]
        input_data_features = feature_extraction.transform(input_mail)

        # making prediction
        prediction = model.predict(input_data_features)
        # print(prediction)
        if prediction[0] == 1:
            return 'Ham mail'
        else:

            return 'Spam mail'
    else:
        # print("Subject is None")
        return 'Subject is None'


gui = Ui_MainWindow()


class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.uic = gui
        self.uic.setupUi(self)
        self.thread = {}
        # khai bao nut start
        self.createTable()
        self.uic.btStart.clicked.connect(self.start_worker_1)

    def createTable(self):
        self.uic.tableWidget.setRowCount(0)
        self.uic.tableWidget.setColumnCount(2)
        header = self.uic.tableWidget.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.Stretch)
        header.setSectionResizeMode(1, QHeaderView.ResizeToContents)
        self.uic.tableWidget.setHorizontalHeaderLabels(['Subject', 'Spam or Ham'])
        # self.uic.tableWidget.setItem(1, 1, QTableWidgetItem("ok la add roi day"))

    def insertDataToRow(self, subject, spamOrHam):
        table = self.uic.tableWidget
        if subject != "" and spamOrHam != "":
            table.insertRow(table.rowCount())
            table.setItem(table.rowCount()-1, 0, QTableWidgetItem(subject))
            table.setItem(table.rowCount()-1, 1, QTableWidgetItem(spamOrHam))

        print(table.rowCount(), subject, spamOrHam)

    def start_worker_1(self):
        self.thread[1] = ThreadClass(parent=None, index=1)
        self.thread[1].start()
        self.thread[1].any_signal.connect(self.insertDataToRow)
        self.uic.btStart.setEnabled(False)


class ThreadClass(QThread):
    any_signal = QtCore.pyqtSignal(str, str)

    def __init__(self, parent=None, index=0):
        super(ThreadClass, self).__init__(parent)
        self.index = index
        self.is_running = True

    def run(self):
        print('Starting thread...')
        while True:
            subject = None
            hamOrSpam = None
            # Have to log in/logout each time because that's the only way to get fresh results.

            mail = imaplib.IMAP4_SSL(imap_host, 993)
            mail.login(imap_user, imap_pass)
            mail.select('Inbox')

            status, data = mail.search(None, '(UNSEEN)')

            # for each e-mail messages, print text content
            for num in data[0].split():
                # get a single message and parse it by policy.SMTP (RFC compliant)
                status, data = mail.fetch(num, '(RFC822)')
                email_msg = data[0][1]
                email_msg = email.message_from_bytes(email_msg, policy=policy.SMTP)
                subject = email_msg['Subject']

                print("\n----- MESSAGE START -----\n")

                print("From: %s\nTo: %s\nDate: %s\nSubject: %s\n\n" % ( \
                    str(email_msg['From']), \
                    str(email_msg['To']), \
                    str(email_msg['Date']), \
                    str(email_msg['Subject'])))

                # print only message parts that contain text data
                print("Mail content:")
                for part in email_msg.walk():
                    if part.get_content_type() == "text/plain":
                        for line in part.get_content().splitlines():
                            print(line)

                hamOrSpam = checkEmail(email_msg['Subject'])
                print("The email is (Spam or Ham): ", hamOrSpam)
                print("\n----- MESSAGE END -----\n")

                # # insert data to table gui
                # insertData(0, email_msg['Subject'])
                # insertData(1, hamOrSpam)
                self.any_signal.emit(subject, hamOrSpam)
            mail.logout()
            time.sleep(1)
            # self.any_signal.emit(subject, hamOrSpam)

    def stop(self):
        self.is_running = False
        print('Stopping thread...', self.index)
        self.terminate()


if __name__ == "__main__":
    app = QApplication(sys.argv)
    main_win = MainWindow()
    main_win.show()
    sys.exit(app.exec())
